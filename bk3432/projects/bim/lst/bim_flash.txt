; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --thumb --list --split_sections --debug -c --asm --interleave -o.\obj\bim_flash.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bim_flash.d --cpu=ARM9E --apcs=interwork -O3 --diag_suppress=9931 -I.\config -I.\app -I..\..\libs -I..\..\sdk\plactform\core_modules\src -I..\..\sdk\plactform\arch -I..\..\sdk\plactform\arch\compiler -I..\..\sdk\plactform\arch\ll -I..\..\sdk\plactform\core_modules\common\api -I..\..\sdk\plactform\arch\boot -I..\..\sdk\plactform\core_modules\dbg\api -I..\..\sdk\plactform\core_modules\rf\api -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\plactform\arch\main -I..\..\sdk\plactform\core_modules\util -I..\..\sdk\plactform\driver\pwm -I..\..\sdk\plactform\driver\adc -I..\..\sdk\plactform\driver\audio -I..\..\sdk\plactform\driver\wdt -I..\..\sdk\plactform\driver\rtc -I..\..\sdk\plactform\driver\i2c -I..\..\sdk\plactform\driver\utc -I..\..\sdk\plactform\driver\ir -I..\..\sdk\plactform\driver\spi -I..\..\sdk\plactform\driver\plf -I..\..\sdk\plactform\driver\counter -I..\..\sdk\plactform\driver\gpio -I..\..\sdk\plactform\driver\intcntl -I..\..\sdk\plactform\driver\icu -I..\..\sdk\plactform\driver\intc -I..\..\sdk\plactform\driver\flash -I..\..\sdk\plactform\driver\timer -I..\..\sdk\plactform\driver\reg -I..\..\sdk\plactform\driver\uart -I..\..\sdk\plactform\driver\emi -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\src -I..\..\sdk\plactform\reg -I..\..\sdk\plactform\driver\syscntl -I..\..\sdk\plactform\rom\hci -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\ble_stack\inc -I..\..\sdk\ble_stack\inc\hci -I..\..\sdk\ble_stack\inc\h4tl -I..\..\sdk\ble_stack\inc\ke -I..\..\sdk\ble_stack\inc\nvds -I..\..\sdk\ble_stack\inc\ea -I..\..\sdk\ble_stack\inc\em -I..\..\sdk\ble_stack\inc\ahi -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapc -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapm -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpc -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\atts -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattm -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cc -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cm -I..\..\sdk\ble_stack\inc\ble\ll\em -I..\..\sdk\ble_stack\inc\ble\ll\llc -I..\..\sdk\ble_stack\inc\ble\ll\lld -I..\..\sdk\ble_stack\inc\ble\ll\llm -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\inc\ble\hl\gap -I..\..\sdk\ble_stack\inc\ble\hl\gatt -I..\..\sdk\ble_stack\com\prf -I..\..\sdk\ble_stack\com\profiles\dis\diss\src -I..\..\sdk\ble_stack\com\profiles\bas\bass\src -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\api -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\src -I..\..\sdk\ble_stack\com\profiles\ancs -I..\..\sdk\ble_stack\com\profiles\FCC0\api -I..\..\sdk\ble_stack\com\profiles\FCC0\src -I..\..\sdk\ble_stack\com\profiles\FCC0\util -I..\..\sdk\ble_stack\com\profiles\FEE0\api -I..\..\sdk\ble_stack\com\profiles\FEE0\src -I..\..\sdk\ble_stack\com\profiles\hogp -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\api -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\src -I..\..\libs -I..\..\sdk\ble_stack\com\profiles\wechat\api -I..\..\sdk\ble_stack\com\profiles\wechat\src -I.\wechat -I..\..\sdk\ble_stack\com\profiles\bas\bass -I..\..\sdk\ble_stack\com\profiles\bas\bass\api -I..\..\sdk\ble_stack\com\profiles\dis\diss -I..\..\sdk\ble_stack\com\profiles\dis\diss\api -I..\..\sdk\ble_stack\com\profiles\FFF0\api -I..\..\sdk\ble_stack\com\profiles\FFF0 -I..\..\sdk\ble_stack\com\profiles\oad\api -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\bim_flash.crf app\bim_flash.c]
                          THUMB

                          AREA ||i.bim_flash_clearKey||, CODE, READONLY, ALIGN=2

                  bim_flash_clearKey PROC
;;;34     
;;;35     static void bim_flash_clearKey(void)
000000  4802              LDR      r0,|L1.12|
;;;36     {
;;;37         // write control key
;;;38         REG_AHB3_MFC_KEYWORD = 0x0;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
;;;39         REG_AHB3_MFC_KEYWORD = 0x0;
000006  6001              STR      r1,[r0,#0]
;;;40     }
000008  4770              BX       lr
;;;41      
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x00803000

                          AREA ||i.bim_flash_erase||, CODE, READONLY, ALIGN=1

                  bim_flash_erase PROC
;;;129    
;;;130    void bim_flash_erase(uint8_t flash_type, uint32_t address, uint32_t size)
000000  b570              PUSH     {r4-r6,lr}
;;;131    {
000002  0006              MOVS     r6,r0
;;;132        uint32_t end_address;
;;;133        end_address = address + size;
000004  188d              ADDS     r5,r1,r2
;;;134    
;;;135        // Check parameters
;;;136        if((flash_type > FLASH_SPACE_TYPE_NVR))
000006  2801              CMP      r0,#1
000008  d809              BHI      |L2.30|
;;;137        {		
;;;138            return ;
;;;139        }
;;;140    
;;;141        address = address & ~(FLASH_SECT_SIZE1 - 1);
00000a  0a4c              LSRS     r4,r1,#9
00000c  0264              LSLS     r4,r4,#9
;;;142        while(address < end_address)
00000e  e004              B        |L2.26|
                  |L2.16|
;;;143        {
;;;144            bim_flash_erase_sector(flash_type,address);
000010  0021              MOVS     r1,r4
000012  0030              MOVS     r0,r6
000014  f7fffffe          BL       bim_flash_erase_sector
000018  3480              ADDS     r4,r4,#0x80
                  |L2.26|
00001a  42ac              CMP      r4,r5                 ;142
00001c  d3f8              BCC      |L2.16|
                  |L2.30|
;;;145            
;;;146           /* Calculate next sector address (below 0x000100) */
;;;147            address += FLASH_SECT_SIZE1/4;
;;;148        }
;;;149    
;;;150        return;
;;;151    }
00001e  bd70              POP      {r4-r6,pc}
;;;152    
                          ENDP


                          AREA ||i.bim_flash_erase_sector||, CODE, READONLY, ALIGN=2

                  bim_flash_erase_sector PROC
;;;107    
;;;108    void bim_flash_erase_sector(uint8_t type,uint32_t address)
000000  b570              PUSH     {r4-r6,lr}
;;;109    {
;;;110    
;;;111        uint32_t reg;
;;;112    
;;;113        REG_AHB3_MFC_ADDR = address;
000002  4c0b              LDR      r4,|L3.48|
000004  0005              MOVS     r5,r0                 ;109
000006  60a1              STR      r1,[r4,#8]
;;;114    
;;;115        bim_flash_writeKey(); // write key
000008  f7fffffe          BL       bim_flash_writeKey
;;;116        bim_flash_unlock(); //wipe off WP
00000c  f7fffffe          BL       bim_flash_unlock
;;;117    
;;;118        reg = REG_AHB3_MFC_CONTROL;
000010  6861              LDR      r1,[r4,#4]
;;;119        reg &= ~((0x07 << 2) | (0x03 << 5)); //clear control mode and space
000012  207c              MOVS     r0,#0x7c
000014  4381              BICS     r1,r1,r0
;;;120        reg  |= ( MFC_CONTROL_SECT_ERASE | (type << 5)); // set write mode and control space
000016  0168              LSLS     r0,r5,#5
000018  3008              ADDS     r0,r0,#8
00001a  4308              ORRS     r0,r0,r1
;;;121        REG_AHB3_MFC_CONTROL = reg;
00001c  6060              STR      r0,[r4,#4]
;;;122    
;;;123        bim_flash_start();
00001e  f7fffffe          BL       bim_flash_start
                  |L3.34|
;;;124    
;;;125        while(bim_flash_status());
000022  f7fffffe          BL       bim_flash_status
000026  2800              CMP      r0,#0
000028  d1fb              BNE      |L3.34|
;;;126        bim_flash_clearKey();
00002a  f7fffffe          BL       bim_flash_clearKey
;;;127    }
00002e  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP

                  |L3.48|
                          DCD      0x00803000

                          AREA ||i.bim_flash_init||, CODE, READONLY, ALIGN=2

                  bim_flash_init PROC
;;;51     
;;;52      void bim_flash_init(void)
000000  4805              LDR      r0,|L4.24|
;;;53      {
;;;54          // Init flash environment    
;;;55          bim_flash_env.length[0]    =  FLASH_MAIN_SIZE;
000002  2105              MOVS     r1,#5
000004  03c9              LSLS     r1,r1,#15
;;;56          bim_flash_env.space_type[0]  = FLASH_SPACE_TYPE_MAIN; 
000006  6001              STR      r1,[r0,#0]  ; bim_flash_env
000008  2100              MOVS     r1,#0
00000a  7201              STRB     r1,[r0,#8]
;;;57          
;;;58          bim_flash_env.length[1]    =  FLASH_NVR_SIZE;
00000c  2101              MOVS     r1,#1
00000e  0249              LSLS     r1,r1,#9
;;;59          bim_flash_env.space_type[1]  = FLASH_SPACE_TYPE_NVR;
000010  6041              STR      r1,[r0,#4]  ; bim_flash_env
000012  2101              MOVS     r1,#1
000014  7241              STRB     r1,[r0,#9]
;;;60       
;;;61      }
000016  4770              BX       lr
;;;62      
                          ENDP

                  |L4.24|
                          DCD      ||.bss||

                          AREA ||i.bim_flash_read||, CODE, READONLY, ALIGN=2

                  bim_flash_read PROC
;;;187    
;;;188    void bim_flash_read(uint8_t flash_space, uint32_t address, uint32_t length, uint8_t *buffer)
000000  b5f8              PUSH     {r3-r7,lr}
;;;189    {
000002  0007              MOVS     r7,r0
;;;190        uint32_t data = 0xffffffff;
000004  2000              MOVS     r0,#0
000006  000e              MOVS     r6,r1                 ;189
000008  43c0              MVNS     r0,r0
;;;191        uint8_t cnt;
;;;192        
;;;193        // Check parameters
;;;194        if (  length > bim_flash_env.length[flash_space] )
00000a  4917              LDR      r1,|L5.104|
00000c  9000              STR      r0,[sp,#0]            ;190
00000e  00b8              LSLS     r0,r7,#2              ;190
000010  5808              LDR      r0,[r1,r0]
000012  001d              MOVS     r5,r3                 ;189
000014  0014              MOVS     r4,r2                 ;189
000016  42a0              CMP      r0,r4
000018  d324              BCC      |L5.100|
;;;195        {        
;;;196            return ;
;;;197        }
;;;198    
;;;199        if ( flash_space > FLASH_SPACE_TYPE_NVR )
00001a  2f01              CMP      r7,#1
00001c  d822              BHI      |L5.100|
00001e  e00c              B        |L5.58|
                  |L5.32|
;;;200        {        
;;;201            return ;
;;;202        }
;;;203    
;;;204    
;;;205        while(length >= 4)
;;;206        {
;;;207            data = bim_flash_readword(flash_space,address);	
000020  0031              MOVS     r1,r6
000022  0038              MOVS     r0,r7
000024  f7fffffe          BL       bim_flash_readword
;;;208            memcpy(buffer, &data, 4);
000028  9000              STR      r0,[sp,#0]
00002a  2204              MOVS     r2,#4
00002c  0028              MOVS     r0,r5
00002e  4669              MOV      r1,sp
000030  f7fffffe          BL       __aeabi_memcpy
000034  1f24              SUBS     r4,r4,#4
000036  1d2d              ADDS     r5,r5,#4
000038  1c76              ADDS     r6,r6,#1
                  |L5.58|
00003a  2c04              CMP      r4,#4                 ;205
00003c  d2f0              BCS      |L5.32|
;;;209    		address += 1;
;;;210            buffer += 4;
;;;211            length -= 4;
;;;212        }
;;;213    
;;;214        if(length != 0)
00003e  2c00              CMP      r4,#0
000040  d010              BEQ      |L5.100|
;;;215        {
;;;216            /* read last byte */
;;;217            data = bim_flash_readword(flash_space,address);
000042  0031              MOVS     r1,r6
000044  0038              MOVS     r0,r7
000046  f7fffffe          BL       bim_flash_readword
;;;218    
;;;219            for(cnt = 0; cnt < length;cnt++)
00004a  9000              STR      r0,[sp,#0]
00004c  2000              MOVS     r0,#0
00004e  e007              B        |L5.96|
                  |L5.80|
;;;220            {
;;;221                *buffer++ = ( data >> (cnt  * 8) & 0xFF );
000050  9900              LDR      r1,[sp,#0]
000052  00c2              LSLS     r2,r0,#3              ;219
000054  40d1              LSRS     r1,r1,r2
000056  1c40              ADDS     r0,r0,#1
000058  0600              LSLS     r0,r0,#24             ;219
00005a  0e00              LSRS     r0,r0,#24             ;219
00005c  7029              STRB     r1,[r5,#0]
00005e  1c6d              ADDS     r5,r5,#1              ;219
                  |L5.96|
000060  42a0              CMP      r0,r4                 ;219
000062  d3f5              BCC      |L5.80|
                  |L5.100|
;;;222            }
;;;223        }
;;;224    
;;;225        return ;
;;;226    }
000064  bdf8              POP      {r3-r7,pc}
;;;227    
                          ENDP

000066  0000              DCW      0x0000
                  |L5.104|
                          DCD      ||.bss||

                          AREA ||i.bim_flash_readword||, CODE, READONLY, ALIGN=2

                  bim_flash_readword PROC
;;;63     
;;;64      uint32_t bim_flash_readword(uint8_t type,uint32_t address)
000000  b570              PUSH     {r4-r6,lr}
;;;65     {
;;;66         uint32_t reg;
;;;67         uint32_t data;
;;;68         
;;;69     
;;;70         REG_AHB3_MFC_ADDR = address;
000002  4c0c              LDR      r4,|L6.52|
000004  0005              MOVS     r5,r0                 ;65
000006  60a1              STR      r1,[r4,#8]
;;;71     
;;;72         bim_flash_writeKey(); // write key
000008  f7fffffe          BL       bim_flash_writeKey
;;;73         bim_flash_unlock(); //wipe off WP
00000c  f7fffffe          BL       bim_flash_unlock
;;;74     
;;;75         reg = REG_AHB3_MFC_CONTROL;
000010  6861              LDR      r1,[r4,#4]
;;;76         reg &= ~((0x07 << 2) | (0x03 << 5)); //clear control mode and space
000012  207c              MOVS     r0,#0x7c
000014  4381              BICS     r1,r1,r0
;;;77         reg  |= ( MFC_CONTROL_READ | (type << 5)); // set write mode and control space
000016  0168              LSLS     r0,r5,#5
000018  4308              ORRS     r0,r0,r1
;;;78         REG_AHB3_MFC_CONTROL = reg;
00001a  6060              STR      r0,[r4,#4]
;;;79     
;;;80         bim_flash_start();
00001c  f7fffffe          BL       bim_flash_start
                  |L6.32|
;;;81     
;;;82         while(bim_flash_status() == 1);
000020  f7fffffe          BL       bim_flash_status
000024  2801              CMP      r0,#1
000026  d0fb              BEQ      |L6.32|
;;;83     
;;;84         data = REG_AHB3_MFC_DATA;
000028  68e4              LDR      r4,[r4,#0xc]
;;;85         bim_flash_clearKey();
00002a  f7fffffe          BL       bim_flash_clearKey
;;;86         return data;
00002e  0020              MOVS     r0,r4
;;;87     }
000030  bd70              POP      {r4-r6,pc}
;;;88     
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      0x00803000

                          AREA ||i.bim_flash_start||, CODE, READONLY, ALIGN=2

                  bim_flash_start PROC
;;;41      
;;;42     static void bim_flash_start(void)
000000  4802              LDR      r0,|L7.12|
;;;43     {
;;;44         REG_AHB3_MFC_CONTROL |= 0x01;
000002  6841              LDR      r1,[r0,#4]
000004  2201              MOVS     r2,#1
000006  4311              ORRS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;45     }
00000a  4770              BX       lr
;;;46     
                          ENDP

                  |L7.12|
                          DCD      0x00803000

                          AREA ||i.bim_flash_status||, CODE, READONLY, ALIGN=2

                  bim_flash_status PROC
;;;46     
;;;47     static uint8_t bim_flash_status(void)
000000  4802              LDR      r0,|L8.12|
;;;48     {
;;;49         return REG_AHB3_MFC_CONTROL & 0x01;
000002  6840              LDR      r0,[r0,#4]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
;;;50     }
000008  4770              BX       lr
;;;51     
                          ENDP

00000a  0000              DCW      0x0000
                  |L8.12|
                          DCD      0x00803000

                          AREA ||i.bim_flash_unlock||, CODE, READONLY, ALIGN=2

                  bim_flash_unlock PROC
;;;20     
;;;21     static void bim_flash_unlock(void)
000000  4802              LDR      r0,|L9.12|
;;;22     {
;;;23         // Unlock all sectors
;;;24         REG_AHB3_MFC_WP0 = 0xA5;
000002  21a5              MOVS     r1,#0xa5
000004  6101              STR      r1,[r0,#0x10]
;;;25         REG_AHB3_MFC_WP1 = 0xC3;
000006  21c3              MOVS     r1,#0xc3
000008  6141              STR      r1,[r0,#0x14]
;;;26     }
00000a  4770              BX       lr
;;;27      
                          ENDP

                  |L9.12|
                          DCD      0x00803000

                          AREA ||i.bim_flash_write||, CODE, READONLY, ALIGN=2

                  bim_flash_write PROC
;;;152    
;;;153    void bim_flash_write(uint8_t flash_space, uint32_t address, uint32_t length, uint8_t *buffer)
000000  b5f8              PUSH     {r3-r7,lr}
;;;154    {
000002  001c              MOVS     r4,r3
000004  0015              MOVS     r5,r2
000006  000e              MOVS     r6,r1
000008  0007              MOVS     r7,r0
;;;155        uint32_t data = 0xffffffff;
;;;156        uint8_t  cnt;
;;;157       
;;;158        // Check parameters
;;;159        if ( (flash_space > FLASH_SPACE_TYPE_NVR) || (( length) > bim_flash_env.length[flash_space]) )
00000a  2801              CMP      r0,#1
00000c  d82e              BHI      |L10.108|
00000e  4918              LDR      r1,|L10.112|
000010  00b8              LSLS     r0,r7,#2              ;154
000012  5808              LDR      r0,[r1,r0]
000014  42a8              CMP      r0,r5
000016  d329              BCC      |L10.108|
000018  e010              B        |L10.60|
                  |L10.26|
;;;160        {
;;;161            return ;
;;;162        }
;;;163    
;;;164        while(length >= 4)
;;;165        {
;;;166            data = (buffer[0] | (buffer[1] << 8) | (buffer[2] << 16) | (buffer[3] << 24)); 
00001a  7860              LDRB     r0,[r4,#1]
00001c  7822              LDRB     r2,[r4,#0]
00001e  78e1              LDRB     r1,[r4,#3]
000020  0200              LSLS     r0,r0,#8
000022  4302              ORRS     r2,r2,r0
000024  78a0              LDRB     r0,[r4,#2]
000026  0609              LSLS     r1,r1,#24
000028  0400              LSLS     r0,r0,#16
00002a  4308              ORRS     r0,r0,r1
00002c  4302              ORRS     r2,r2,r0
;;;167            bim_flash_writeword(flash_space,address , data);
00002e  0031              MOVS     r1,r6
000030  0038              MOVS     r0,r7
000032  f7fffffe          BL       bim_flash_writeword
000036  1d24              ADDS     r4,r4,#4
000038  1f2d              SUBS     r5,r5,#4
00003a  1c76              ADDS     r6,r6,#1
                  |L10.60|
00003c  2d04              CMP      r5,#4                 ;164
00003e  d2ec              BCS      |L10.26|
;;;168    
;;;169            address += 1;
;;;170            buffer += 4;
;;;171            length -= 4;
;;;172        }
;;;173    
;;;174        if(length != 0)
000040  2d00              CMP      r5,#0
000042  d013              BEQ      |L10.108|
;;;175        { /* write last mutil byte */
;;;176            data = 0xffffffff;
000044  2200              MOVS     r2,#0
000046  43d2              MVNS     r2,r2
;;;177            for(cnt = 0; cnt < length;cnt++)
000048  2000              MOVS     r0,#0
00004a  e009              B        |L10.96|
                  |L10.76|
00004c  00c1              LSLS     r1,r0,#3
;;;178            {
;;;179                data &= ~(0xff << (8 * cnt));
00004e  23ff              MOVS     r3,#0xff
000050  408b              LSLS     r3,r3,r1
000052  439a              BICS     r2,r2,r3
;;;180                data |= (buffer[cnt] << (8 * cnt )) ;
000054  5c23              LDRB     r3,[r4,r0]
000056  408b              LSLS     r3,r3,r1
000058  1c40              ADDS     r0,r0,#1
00005a  431a              ORRS     r2,r2,r3
00005c  0600              LSLS     r0,r0,#24             ;177
00005e  0e00              LSRS     r0,r0,#24             ;177
                  |L10.96|
000060  42a8              CMP      r0,r5                 ;177
000062  d3f3              BCC      |L10.76|
;;;181            }
;;;182            bim_flash_writeword(flash_space,address, data);
000064  0031              MOVS     r1,r6
000066  0038              MOVS     r0,r7
000068  f7fffffe          BL       bim_flash_writeword
                  |L10.108|
;;;183        }
;;;184    
;;;185        return ;
;;;186    }
00006c  bdf8              POP      {r3-r7,pc}
;;;187    
                          ENDP

00006e  0000              DCW      0x0000
                  |L10.112|
                          DCD      ||.bss||

                          AREA ||i.bim_flash_writeKey||, CODE, READONLY, ALIGN=2

                  bim_flash_writeKey PROC
;;;27      
;;;28     static void bim_flash_writeKey(void)
000000  4902              LDR      r1,|L11.12|
;;;29     {
;;;30         // write control key
;;;31         REG_AHB3_MFC_KEYWORD = 0x58A9;
000002  4803              LDR      r0,|L11.16|
000004  6001              STR      r1,[r0,#0]
;;;32         REG_AHB3_MFC_KEYWORD = 0xA958;
000006  4903              LDR      r1,|L11.20|
000008  6001              STR      r1,[r0,#0]
;;;33     }
00000a  4770              BX       lr
;;;34     
                          ENDP

                  |L11.12|
                          DCD      0x000058a9
                  |L11.16|
                          DCD      0x00803000
                  |L11.20|
                          DCD      0x0000a958

                          AREA ||i.bim_flash_writeword||, CODE, READONLY, ALIGN=2

                  bim_flash_writeword PROC
;;;88     
;;;89      void bim_flash_writeword(uint8_t type,uint32_t address, uint32_t data)
000000  b570              PUSH     {r4-r6,lr}
;;;90     {
;;;91         uint32_t reg;
;;;92        
;;;93         REG_AHB3_MFC_ADDR = address;
000002  4c0c              LDR      r4,|L12.52|
000004  0005              MOVS     r5,r0                 ;90
000006  60a1              STR      r1,[r4,#8]
;;;94         /* Write the data                                                                   */
;;;95         REG_AHB3_MFC_DATA = data;
000008  60e2              STR      r2,[r4,#0xc]
;;;96         bim_flash_writeKey(); // write key
00000a  f7fffffe          BL       bim_flash_writeKey
;;;97         bim_flash_unlock(); //wipe off WP
00000e  f7fffffe          BL       bim_flash_unlock
;;;98         reg = REG_AHB3_MFC_CONTROL;
000012  6861              LDR      r1,[r4,#4]
;;;99         reg &= ~((0x07 << 2) | (0x03 << 5)); //clear control mode and space
000014  207c              MOVS     r0,#0x7c
000016  4381              BICS     r1,r1,r0
;;;100        reg  |= ( MFC_CONTROL_WRITE | (type << 5)); // set write mode and control space
000018  0168              LSLS     r0,r5,#5
00001a  1d00              ADDS     r0,r0,#4
00001c  4308              ORRS     r0,r0,r1
;;;101        REG_AHB3_MFC_CONTROL = reg;
00001e  6060              STR      r0,[r4,#4]
;;;102        bim_flash_start();
000020  f7fffffe          BL       bim_flash_start
                  |L12.36|
;;;103        while(bim_flash_status()) ;
000024  f7fffffe          BL       bim_flash_status
000028  2800              CMP      r0,#0
00002a  d1fb              BNE      |L12.36|
;;;104        bim_flash_clearKey();
00002c  f7fffffe          BL       bim_flash_clearKey
;;;105    	
;;;106    }
000030  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      0x00803000

                          AREA ||i.bim_wdt_disable||, CODE, READONLY, ALIGN=2

                  bim_wdt_disable PROC
;;;227    
;;;228    void bim_wdt_disable(void)
000000  2001              MOVS     r0,#1
;;;229    {
;;;230        REG_AHB0_ICU_WDTCLKCON = 0x1 ; // Step1. WDT clock enable
000002  05c1              LSLS     r1,r0,#23
000004  61c8              STR      r0,[r1,#0x1c]
;;;231        REG_APB0_WDT_CFG = 0x005A0000;// Step3. Feed dog. Write WDT key: 0x5A firstly and 0xA5 secondly.
000006  4804              LDR      r0,|L13.24|
000008  212d              MOVS     r1,#0x2d
00000a  0449              LSLS     r1,r1,#17
00000c  6001              STR      r1,[r0,#0]
;;;232        REG_APB0_WDT_CFG = 0x00A50000;
00000e  21a5              MOVS     r1,#0xa5
000010  0409              LSLS     r1,r1,#16
000012  6001              STR      r1,[r0,#0]
;;;233    }
000014  4770              BX       lr
;;;234    void bim_wdt_enable(uint16_t wdt_cnt)
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      0x00806000

                          AREA ||i.bim_wdt_enable||, CODE, READONLY, ALIGN=2

                  bim_wdt_enable PROC
;;;233    }
;;;234    void bim_wdt_enable(uint16_t wdt_cnt)
000000  2100              MOVS     r1,#0
;;;235    {
;;;236        //the timer is 48uS @1 CLK
;;;237        //0xffff: 3s
;;;238        REG_AHB0_ICU_WDTCLKCON = 0x0 ; // Step1. WDT clock enable,16M
000002  2201              MOVS     r2,#1
000004  05d2              LSLS     r2,r2,#23
000006  61d1              STR      r1,[r2,#0x1c]
;;;239        REG_APB0_WDT_CFG  = wdt_cnt;   // Step2. Set WDT period=0xFF
000008  4905              LDR      r1,|L14.32|
00000a  6008              STR      r0,[r1,#0]
;;;240        // Do two things together: 1. Set WDT period. 2. Write WDT key to feed dog.
;;;241        // Write WDT key: 0x5A firstly and 0xA5 secondly.
;;;242        REG_APB0_WDT_CFG = (0x5A<<16) + wdt_cnt;
00000c  222d              MOVS     r2,#0x2d
00000e  0452              LSLS     r2,r2,#17
000010  1882              ADDS     r2,r0,r2
000012  600a              STR      r2,[r1,#0]
;;;243        REG_APB0_WDT_CFG = (0xA5<<16) + wdt_cnt;
000014  22a5              MOVS     r2,#0xa5
000016  0412              LSLS     r2,r2,#16
000018  1880              ADDS     r0,r0,r2
00001a  6008              STR      r0,[r1,#0]
;;;244    }
00001c  4770              BX       lr
;;;245    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      0x00806000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  bim_flash_env
                          %        12
