; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --thumb --list --split_sections --debug -c --asm --interleave -o.\obj\bim_updataimage.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bim_updataimage.d --cpu=ARM9E --apcs=interwork -O3 --diag_suppress=9931 -I.\config -I.\app -I..\..\libs -I..\..\sdk\plactform\core_modules\src -I..\..\sdk\plactform\arch -I..\..\sdk\plactform\arch\compiler -I..\..\sdk\plactform\arch\ll -I..\..\sdk\plactform\core_modules\common\api -I..\..\sdk\plactform\arch\boot -I..\..\sdk\plactform\core_modules\dbg\api -I..\..\sdk\plactform\core_modules\rf\api -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\plactform\arch\main -I..\..\sdk\plactform\core_modules\util -I..\..\sdk\plactform\driver\pwm -I..\..\sdk\plactform\driver\adc -I..\..\sdk\plactform\driver\audio -I..\..\sdk\plactform\driver\wdt -I..\..\sdk\plactform\driver\rtc -I..\..\sdk\plactform\driver\i2c -I..\..\sdk\plactform\driver\utc -I..\..\sdk\plactform\driver\ir -I..\..\sdk\plactform\driver\spi -I..\..\sdk\plactform\driver\plf -I..\..\sdk\plactform\driver\counter -I..\..\sdk\plactform\driver\gpio -I..\..\sdk\plactform\driver\intcntl -I..\..\sdk\plactform\driver\icu -I..\..\sdk\plactform\driver\intc -I..\..\sdk\plactform\driver\flash -I..\..\sdk\plactform\driver\timer -I..\..\sdk\plactform\driver\reg -I..\..\sdk\plactform\driver\uart -I..\..\sdk\plactform\driver\emi -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\com\rwble -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\com\rwble_hl -I..\..\sdk\ble_stack\src -I..\..\sdk\plactform\reg -I..\..\sdk\plactform\driver\syscntl -I..\..\sdk\plactform\rom\hci -I..\..\sdk\plactform\core_modules\ecc_p256\api -I..\..\sdk\ble_stack\inc -I..\..\sdk\ble_stack\inc\hci -I..\..\sdk\ble_stack\inc\h4tl -I..\..\sdk\ble_stack\inc\ke -I..\..\sdk\ble_stack\inc\nvds -I..\..\sdk\ble_stack\inc\ea -I..\..\sdk\ble_stack\inc\em -I..\..\sdk\ble_stack\inc\ahi -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapc -I..\..\sdk\ble_stack\inc\ble\hl\gap\gapm -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpc -I..\..\sdk\ble_stack\inc\ble\hl\gap\smpm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\attm -I..\..\sdk\ble_stack\inc\ble\hl\gatt\atts -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattc -I..\..\sdk\ble_stack\inc\ble\hl\gatt\gattm -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cc -I..\..\sdk\ble_stack\inc\ble\hl\l2c\l2cm -I..\..\sdk\ble_stack\inc\ble\ll\em -I..\..\sdk\ble_stack\inc\ble\ll\llc -I..\..\sdk\ble_stack\inc\ble\ll\lld -I..\..\sdk\ble_stack\inc\ble\ll\llm -I..\..\sdk\ble_stack\com\rwip\api -I..\..\sdk\ble_stack\inc\ble\hl\gap -I..\..\sdk\ble_stack\inc\ble\hl\gatt -I..\..\sdk\ble_stack\com\prf -I..\..\sdk\ble_stack\com\profiles\dis\diss\src -I..\..\sdk\ble_stack\com\profiles\bas\bass\src -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\api -I..\..\sdk\ble_stack\com\profiles\ancs\ancsc\src -I..\..\sdk\ble_stack\com\profiles\ancs -I..\..\sdk\ble_stack\com\profiles\FCC0\api -I..\..\sdk\ble_stack\com\profiles\FCC0\src -I..\..\sdk\ble_stack\com\profiles\FCC0\util -I..\..\sdk\ble_stack\com\profiles\FEE0\api -I..\..\sdk\ble_stack\com\profiles\FEE0\src -I..\..\sdk\ble_stack\com\profiles\hogp -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\api -I..\..\sdk\ble_stack\com\profiles\hogp\hogpd\src -I..\..\libs -I..\..\sdk\ble_stack\com\profiles\wechat\api -I..\..\sdk\ble_stack\com\profiles\wechat\src -I.\wechat -I..\..\sdk\ble_stack\com\profiles\bas\bass -I..\..\sdk\ble_stack\com\profiles\bas\bass\api -I..\..\sdk\ble_stack\com\profiles\dis\diss -I..\..\sdk\ble_stack\com\profiles\dis\diss\api -I..\..\sdk\ble_stack\com\profiles\FFF0\api -I..\..\sdk\ble_stack\com\profiles\FFF0 -I..\..\sdk\ble_stack\com\profiles\oad\api -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\bim_updataimage.crf app\bim_updataImage.c]
                          THUMB

                          AREA ||i.bim_check_backup_sec_status||, CODE, READONLY, ALIGN=2

                  bim_check_backup_sec_status PROC
;;;230     
;;;231    uint8_t bim_check_backup_sec_status(void)//NOT WRITE INFO TO FLASH
000000  b570              PUSH     {r4-r6,lr}
;;;232    {	
;;;233    	bim_get_psec_backup_header();
000002  f7fffffe          BL       bim_get_psec_backup_header
;;;234    
;;;235        if(hdr_back.rom_ver == 0xffff || hdr_back.ver == 0xffff)
000006  4c1b              LDR      r4,|L1.116|
000008  481b              LDR      r0,|L1.120|
00000a  89e1              LDRH     r1,[r4,#0xe]  ; hdr_back
00000c  4281              CMP      r1,r0
00000e  d002              BEQ      |L1.22|
000010  88a1              LDRH     r1,[r4,#4]  ; hdr_back
000012  4281              CMP      r1,r0
000014  d101              BNE      |L1.26|
                  |L1.22|
;;;236    	{
;;;237    		return SSTATUS_SECT_ERASED;
000016  2001              MOVS     r0,#1
;;;238    	}
;;;239    	
;;;240    	if(hdr_back.uid == OAD_APP_PART_UID)
;;;241    	{
;;;242    		if(CRC_UNCHECK == hdr_back.crc_status) // image not crc check and image is exist ,do crc calc
;;;243    		{
;;;244    			if(hdr_back.len != 0xffff && (hdr_back.len / 4) <= SEC_MAX_FSIZE_APP_BLOCK)
;;;245    			{
;;;246    				if(hdr_back.crc == calc_backup_sec_crc()) // crc ok
;;;247    				{
;;;248    					bim_uart_write("crc ok\r\n");
;;;249    					hdr_back.crc_status = CRC_CHECK_OK;
;;;250    					hdr_back.sec_status = SECT_NORMAL;	
;;;251    					return SSTATUS_SECT_NORMAL;
;;;252    				}else
;;;253    				{	
;;;254    					bim_uart_write("crc error\r\n");
;;;255    					hdr_back.crc_status = CRC_CHECK_FAIL;
;;;256    					hdr_back.sec_status = SECT_ABNORMAL;
;;;257    					return SSTATUS_SECT_ABNORMAL;
;;;258    				}
;;;259    			}
;;;260    	        else
;;;261    			{
;;;262    				hdr_back.crc_status = CRC_CHECK_FAIL;
;;;263    				hdr_back.sec_status = SECT_ABNORMAL;		
;;;264    				return SSTATUS_SECT_ABNORMAL;
;;;265    			}
;;;266    		}
;;;267    		else if(CRC_CHECK_FAIL == hdr_back.crc_status)
;;;268    		{
;;;269    			hdr_back.crc_status = CRC_CHECK_FAIL;
;;;270    			hdr_back.sec_status = SECT_ABNORMAL;	
;;;271    			return SSTATUS_SECT_ABNORMAL;
;;;272    		}
;;;273    		else if(CRC_CHECK_OK == hdr_back.crc_status)
;;;274    		{
;;;275    			hdr_back.crc_status = CRC_CHECK_OK;
;;;276    			hdr_back.sec_status = SECT_NORMAL;
;;;277    			return SSTATUS_SECT_NORMAL;
;;;278    		}else
;;;279    		{
;;;280    			hdr_back.crc_status = CRC_CHECK_FAIL;
;;;281    			hdr_back.sec_status = SECT_ABNORMAL;
;;;282    			return SSTATUS_SECT_ABNORMAL;
;;;283    		}
;;;284    	}
;;;285    	else 
;;;286    	{
;;;287    		UART_PRINTF("bim_check_backup_sec_status: ERROR, UNKNOWN UID\r\n");
;;;288    		return SSTATUS_SECT_UNKOWN;
;;;289    	}
;;;290    }
000018  bd70              POP      {r4-r6,pc}
                  |L1.26|
00001a  4a18              LDR      r2,|L1.124|
00001c  68a1              LDR      r1,[r4,#8]            ;240  ; hdr_back
00001e  4291              CMP      r1,r2                 ;240
000020  d122              BNE      |L1.104|
000022  7b21              LDRB     r1,[r4,#0xc]          ;242  ; hdr_back
000024  26aa              MOVS     r6,#0xaa              ;249
000026  2555              MOVS     r5,#0x55              ;255
000028  29ff              CMP      r1,#0xff              ;242
00002a  d004              BEQ      |L1.54|
00002c  2955              CMP      r1,#0x55              ;267
00002e  d017              BEQ      |L1.96|
000030  29aa              CMP      r1,#0xaa              ;273
000032  d00e              BEQ      |L1.82|
000034  e014              B        |L1.96|
                  |L1.54|
000036  88e1              LDRH     r1,[r4,#6]            ;244  ; hdr_back
000038  4281              CMP      r1,r0                 ;244
00003a  d011              BEQ      |L1.96|
00003c  4810              LDR      r0,|L1.128|
00003e  4281              CMP      r1,r0                 ;244
000040  d80e              BHI      |L1.96|
000042  f7fffffe          BL       calc_backup_sec_crc
000046  6821              LDR      r1,[r4,#0]            ;246  ; hdr_back
000048  4288              CMP      r0,r1                 ;246
00004a  d106              BNE      |L1.90|
00004c  a00d              ADR      r0,|L1.132|
00004e  f7fffffe          BL       bim_uart_write
                  |L1.82|
000052  7326              STRB     r6,[r4,#0xc]          ;275
000054  2000              MOVS     r0,#0                 ;277
000056  7366              STRB     r6,[r4,#0xd]          ;276
000058  bd70              POP      {r4-r6,pc}
                  |L1.90|
00005a  a00d              ADR      r0,|L1.144|
00005c  f7fffffe          BL       bim_uart_write
                  |L1.96|
000060  7325              STRB     r5,[r4,#0xc]          ;280
000062  2002              MOVS     r0,#2                 ;282
000064  7365              STRB     r5,[r4,#0xd]          ;281
000066  bd70              POP      {r4-r6,pc}
                  |L1.104|
000068  a00c              ADR      r0,|L1.156|
00006a  f7fffffe          BL       bim_uart_printf_null
00006e  2003              MOVS     r0,#3                 ;288
000070  bd70              POP      {r4-r6,pc}
;;;291    
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      ||.bss||+0x10
                  |L1.120|
                          DCD      0x0000ffff
                  |L1.124|
                          DCD      0x42424242
                  |L1.128|
                          DCD      0x00002903
                  |L1.132|
000084  63726320          DCB      "crc ok\r\n",0
000088  6f6b0d0a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L1.144|
000090  63726320          DCB      "crc error\r\n",0
000094  6572726f
000098  720d0a00
                  |L1.156|
00009c  62696d5f          DCB      "bim_check_backup_sec_status: ERROR, UNKNOWN UID\r\n",0
0000a0  63686563
0000a4  6b5f6261
0000a8  636b7570
0000ac  5f736563
0000b0  5f737461
0000b4  7475733a
0000b8  20455252
0000bc  4f522c20
0000c0  554e4b4e
0000c4  4f574e20
0000c8  5549440d
0000cc  0a00    
0000ce  00                DCB      0
0000cf  00                DCB      0

                          AREA ||i.bim_check_image_sec_status||, CODE, READONLY, ALIGN=2

                  bim_check_image_sec_status PROC
;;;154    
;;;155    uint8_t bim_check_image_sec_status(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;156    {	
;;;157    	bim_get_psec_image_header();
000002  f7fffffe          BL       bim_get_psec_image_header
;;;158    
;;;159    	if(hdr_img.uid == OAD_APP_PART_UID)
000006  4c2f              LDR      r4,|L2.196|
000008  492f              LDR      r1,|L2.200|
00000a  68a0              LDR      r0,[r4,#8]  ; hdr_img
00000c  4288              CMP      r0,r1
00000e  d153              BNE      |L2.184|
;;;160    	{
;;;161    		if(CRC_UNCHECK == hdr_img.crc_status) // image not crc check and image is exist ,do crc calc
000010  7b20              LDRB     r0,[r4,#0xc]  ; hdr_img
;;;162    		{
;;;163    			if(hdr_img.len != 0xffff && (hdr_img.len / 4)<= SEC_MAX_FSIZE_APP_BLOCK)
;;;164    			{
;;;165    				if(hdr_img.crc == calc_image_sec_crc()) // crc ok
;;;166    				{
;;;167    					bim_uart_write("check crc OK!!!\r\n");
;;;168    					hdr_img.crc_status = CRC_CHECK_OK;
;;;169    					hdr_img.sec_status = SECT_NORMAL;
;;;170                        bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
000012  4e2e              LDR      r6,|L2.204|
000014  27aa              MOVS     r7,#0xaa              ;168
;;;171                        bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;172                        bim_get_psec_image_header();				
;;;173    					return SSTATUS_SECT_NORMAL;
;;;174    				}
;;;175    	            else
;;;176    	            {
;;;177    	            	bim_uart_write("check crc fail!!!\r\n");
;;;178    					hdr_img.crc_status = CRC_CHECK_FAIL;
000016  2555              MOVS     r5,#0x55
000018  28ff              CMP      r0,#0xff              ;161
00001a  d004              BEQ      |L2.38|
;;;179    					hdr_img.sec_status = SECT_ABNORMAL;	
;;;180    					bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;181                        bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;182    					return SSTATUS_SECT_ABNORMAL;
;;;183    				}
;;;184    			}
;;;185    			else if(hdr_img.rom_ver == 0xffff)
;;;186    			{
;;;187    				return SSTATUS_SECT_ERASED;
;;;188    			}
;;;189    	        else
;;;190    			{
;;;191    				hdr_img.crc_status = CRC_CHECK_FAIL;
;;;192    				hdr_img.sec_status = SECT_ABNORMAL;
;;;193                    bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;194                    bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;195    				return SSTATUS_SECT_ABNORMAL;
;;;196    			}
;;;197    			
;;;198    		}    
;;;199    		else if(CRC_CHECK_FAIL == hdr_img.crc_status)
00001c  2855              CMP      r0,#0x55
00001e  d03b              BEQ      |L2.152|
;;;200    		{
;;;201    		  	hdr_img.crc_status = CRC_CHECK_FAIL;
;;;202    			hdr_img.sec_status = SECT_ABNORMAL;	
;;;203                bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;204                bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;205    			return SSTATUS_SECT_ABNORMAL;
;;;206    		}
;;;207    		else if(CRC_CHECK_OK == hdr_img.crc_status)
000020  28aa              CMP      r0,#0xaa
000022  d029              BEQ      |L2.120|
000024  e038              B        |L2.152|
                  |L2.38|
000026  88e1              LDRH     r1,[r4,#6]            ;163  ; hdr_img
000028  4829              LDR      r0,|L2.208|
00002a  4281              CMP      r1,r0                 ;163
00002c  d01f              BEQ      |L2.110|
00002e  4a29              LDR      r2,|L2.212|
000030  4291              CMP      r1,r2                 ;163
000032  d81c              BHI      |L2.110|
000034  f7fffffe          BL       calc_image_sec_crc
000038  6821              LDR      r1,[r4,#0]            ;165  ; hdr_img
00003a  4288              CMP      r0,r1                 ;165
00003c  d113              BNE      |L2.102|
00003e  a026              ADR      r0,|L2.216|
000040  f7fffffe          BL       bim_uart_write
000044  7327              STRB     r7,[r4,#0xc]          ;168
000046  4b1f              LDR      r3,|L2.196|
000048  2210              MOVS     r2,#0x10              ;170
00004a  0031              MOVS     r1,r6                 ;170
00004c  2000              MOVS     r0,#0                 ;170
00004e  7367              STRB     r7,[r4,#0xd]          ;169
000050  f7fffffe          BL       bim_flash_write
000054  4b1b              LDR      r3,|L2.196|
000056  2210              MOVS     r2,#0x10              ;171
000058  0031              MOVS     r1,r6                 ;171
00005a  2000              MOVS     r0,#0                 ;171
00005c  f7fffffe          BL       bim_flash_read
000060  f7fffffe          BL       bim_get_psec_image_header
000064  e016              B        |L2.148|
                  |L2.102|
000066  a021              ADR      r0,|L2.236|
000068  f7fffffe          BL       bim_uart_write
00006c  e014              B        |L2.152|
                  |L2.110|
00006e  89e1              LDRH     r1,[r4,#0xe]          ;185  ; hdr_img
000070  4281              CMP      r1,r0                 ;185
000072  d111              BNE      |L2.152|
000074  2001              MOVS     r0,#1                 ;187
;;;208    		{
;;;209    		  	hdr_img.crc_status = CRC_CHECK_OK;
;;;210    			hdr_img.sec_status = SECT_NORMAL;
;;;211                bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;212                bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;213    			return SSTATUS_SECT_NORMAL;
;;;214    		}else
;;;215    		{
;;;216    		  	hdr_img.crc_status = CRC_CHECK_FAIL;
;;;217    			hdr_img.sec_status = SECT_ABNORMAL;
;;;218                bim_flash_write(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4, sizeof(img_hdr_t),(uint8_t *)&hdr_img);
;;;219                bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_OAD_HEADER_APP_FADDR/4,sizeof(img_hdr_t), (uint8_t *)&hdr_img);
;;;220    			return SSTATUS_SECT_ABNORMAL;
;;;221    		}
;;;222    	}
;;;223    	else 
;;;224    	{
;;;225    		bim_uart_write("bim_check_image_sec_status: ERROR, UNKNOWN UID\r\n");
;;;226    		return SSTATUS_SECT_UNKOWN;
;;;227    	}
;;;228    }
000076  bdf8              POP      {r3-r7,pc}
                  |L2.120|
000078  7327              STRB     r7,[r4,#0xc]          ;209
00007a  4b12              LDR      r3,|L2.196|
00007c  2210              MOVS     r2,#0x10              ;211
00007e  0031              MOVS     r1,r6                 ;211
000080  2000              MOVS     r0,#0                 ;211
000082  7367              STRB     r7,[r4,#0xd]          ;210
000084  f7fffffe          BL       bim_flash_write
000088  4b0e              LDR      r3,|L2.196|
00008a  2210              MOVS     r2,#0x10              ;212
00008c  0031              MOVS     r1,r6                 ;212
00008e  2000              MOVS     r0,#0                 ;212
000090  f7fffffe          BL       bim_flash_read
                  |L2.148|
000094  2000              MOVS     r0,#0                 ;213
000096  bdf8              POP      {r3-r7,pc}
                  |L2.152|
000098  7325              STRB     r5,[r4,#0xc]          ;216
00009a  4b0a              LDR      r3,|L2.196|
00009c  2210              MOVS     r2,#0x10              ;218
00009e  0031              MOVS     r1,r6                 ;218
0000a0  2000              MOVS     r0,#0                 ;218
0000a2  7365              STRB     r5,[r4,#0xd]          ;217
0000a4  f7fffffe          BL       bim_flash_write
0000a8  4b06              LDR      r3,|L2.196|
0000aa  2210              MOVS     r2,#0x10              ;219
0000ac  0031              MOVS     r1,r6                 ;219
0000ae  2000              MOVS     r0,#0                 ;219
0000b0  f7fffffe          BL       bim_flash_read
0000b4  2002              MOVS     r0,#2                 ;220
0000b6  bdf8              POP      {r3-r7,pc}
                  |L2.184|
0000b8  a011              ADR      r0,|L2.256|
0000ba  f7fffffe          BL       bim_uart_write
0000be  2003              MOVS     r0,#3                 ;226
0000c0  bdf8              POP      {r3-r7,pc}
;;;229    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L2.196|
                          DCD      ||.bss||
                  |L2.200|
                          DCD      0x42424242
                  |L2.204|
                          DCD      0x00004a04
                  |L2.208|
                          DCD      0x0000ffff
                  |L2.212|
                          DCD      0x00002903
                  |L2.216|
0000d8  63686563          DCB      "check crc OK!!!\r\n",0
0000dc  6b206372
0000e0  63204f4b
0000e4  2121210d
0000e8  0a00    
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L2.236|
0000ec  63686563          DCB      "check crc fail!!!\r\n",0
0000f0  6b206372
0000f4  63206661
0000f8  696c2121
0000fc  210d0a00
                  |L2.256|
000100  62696d5f          DCB      "bim_check_image_sec_status: ERROR, UNKNOWN UID\r\n",0
000104  63686563
000108  6b5f696d
00010c  6167655f
000110  7365635f
000114  73746174
000118  75733a20
00011c  4552524f
000120  522c2055
000124  4e4b4e4f
000128  574e2055
00012c  49440d0a
000130  00      
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0

                          AREA ||i.bim_erase_backup_sec||, CODE, READONLY, ALIGN=2

                  bim_erase_backup_sec PROC
;;;316    
;;;317    void bim_erase_backup_sec(void)
000000  b570              PUSH     {r4-r6,lr}
;;;318    {
;;;319    	bim_uart_write("udi_erase_backup_sec \r\n");
000002  a00b              ADR      r0,|L3.48|
000004  f7fffffe          BL       bim_uart_write
;;;320        
;;;321    	//bim_flash_erase(FLASH_SPACE_TYPE_MAIN, SEC_BACKUP_ALLOC_START_FADDR/4, 26*1024/4);
;;;322        uint32_t earse_addr = SEC_BACKUP_ALLOC_START_FADDR;
000008  2573              MOVS     r5,#0x73
00000a  02ad              LSLS     r5,r5,#10
;;;323        for(uint8_t i=0; i<82; i++)//
00000c  2400              MOVS     r4,#0
                  |L3.14|
;;;324        {
;;;325            bim_flash_erase_sector(FLASH_SPACE_TYPE_MAIN, earse_addr/4);
00000e  08a9              LSRS     r1,r5,#2
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       bim_flash_erase_sector
000016  1c64              ADDS     r4,r4,#1
000018  35ff              ADDS     r5,r5,#0xff           ;323
00001a  0624              LSLS     r4,r4,#24             ;323
00001c  35ff              ADDS     r5,r5,#0xff           ;323
00001e  0e24              LSRS     r4,r4,#24             ;323
000020  3502              ADDS     r5,#2                 ;323
000022  2c52              CMP      r4,#0x52              ;323
000024  d3f3              BCC      |L3.14|
;;;326            earse_addr += 512;
;;;327        }
;;;328        bim_uart_write("udi_erase_backup_sec end\r\n");
000026  a008              ADR      r0,|L3.72|
000028  f7fffffe          BL       bim_uart_write
;;;329    }
00002c  bd70              POP      {r4-r6,pc}
;;;330    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
000030  7564695f          DCB      "udi_erase_backup_sec \r\n",0
000034  65726173
000038  655f6261
00003c  636b7570
000040  5f736563
000044  200d0a00
                  |L3.72|
000048  7564695f          DCB      "udi_erase_backup_sec end\r\n",0
00004c  65726173
000050  655f6261
000054  636b7570
000058  5f736563
00005c  20656e64
000060  0d0a00  
000063  00                DCB      0

                          AREA ||i.bim_erase_image_sec||, CODE, READONLY, ALIGN=2

                  bim_erase_image_sec PROC
;;;293    
;;;294    void bim_erase_image_sec(void)  
000000  b570              PUSH     {r4-r6,lr}
;;;295    {
;;;296    	if(hdr_back.uid == OAD_APP_PART_UID)  //41k
000002  480f              LDR      r0,|L4.64|
000004  490f              LDR      r1,|L4.68|
000006  6880              LDR      r0,[r0,#8]  ; hdr_back
000008  4288              CMP      r0,r1
00000a  d114              BNE      |L4.54|
;;;297    	{
;;;298    		bim_uart_write("udi_erase_image_sec \r\n");
00000c  a00e              ADR      r0,|L4.72|
00000e  f7fffffe          BL       bim_uart_write
;;;299    
;;;300            //bim_flash_erase(FLASH_SPACE_TYPE_MAIN, SEC_IMAGE_ALLOC_START_APP_FADDR/4, 25*1024/4);
;;;301            uint32_t earse_addr = SEC_IMAGE_ALLOC_START_APP_FADDR;
000012  4d13              LDR      r5,|L4.96|
;;;302            for(uint8_t i=0; i<82; i++)
000014  2400              MOVS     r4,#0
                  |L4.22|
;;;303            {
;;;304                bim_flash_erase_sector(FLASH_SPACE_TYPE_MAIN, earse_addr/4);
000016  08a9              LSRS     r1,r5,#2
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       bim_flash_erase_sector
00001e  1c64              ADDS     r4,r4,#1
000020  35ff              ADDS     r5,r5,#0xff           ;302
000022  0624              LSLS     r4,r4,#24             ;302
000024  35ff              ADDS     r5,r5,#0xff           ;302
000026  0e24              LSRS     r4,r4,#24             ;302
000028  3502              ADDS     r5,#2                 ;302
00002a  2c52              CMP      r4,#0x52              ;302
00002c  d3f3              BCC      |L4.22|
;;;305                earse_addr += 512;
;;;306            }
;;;307            bim_uart_write("udi_erase_image_sec end\r\n");
00002e  a00d              ADR      r0,|L4.100|
000030  f7fffffe          BL       bim_uart_write
;;;308    	}
;;;309    	else
;;;310    	{
;;;311    		UART_PRINTF("bim_erase_image_sec: ERROR, UNKNOWN UID\r\n");
;;;312    	}
;;;313    }
000034  bd70              POP      {r4-r6,pc}
                  |L4.54|
000036  a012              ADR      r0,|L4.128|
000038  f7fffffe          BL       bim_uart_printf_null
00003c  bd70              POP      {r4-r6,pc}
;;;314    
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
                          DCD      ||.bss||+0x10
                  |L4.68|
                          DCD      0x42424242
                  |L4.72|
000048  7564695f          DCB      "udi_erase_image_sec \r\n",0
00004c  65726173
000050  655f696d
000054  6167655f
000058  73656320
00005c  0d0a00  
00005f  00                DCB      0
                  |L4.96|
                          DCD      0x00012810
                  |L4.100|
000064  7564695f          DCB      "udi_erase_image_sec end\r\n",0
000068  65726173
00006c  655f696d
000070  6167655f
000074  73656320
000078  656e640d
00007c  0a00    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L4.128|
000080  62696d5f          DCB      "bim_erase_image_sec: ERROR, UNKNOWN UID\r\n",0
000084  65726173
000088  655f696d
00008c  6167655f
000090  7365633a
000094  20455252
000098  4f522c20
00009c  554e4b4e
0000a0  4f574e20
0000a4  5549440d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i.bim_get_psec_backup_header||, CODE, READONLY, ALIGN=2

                  bim_get_psec_backup_header PROC
;;;47      
;;;48     uint32_t bim_get_psec_backup_header(void)
000000  2173              MOVS     r1,#0x73
;;;49     {
000002  b510              PUSH     {r4,lr}
;;;50     	UART_PRINTF("udi_get_psec_backup_header addr = 0x%x\r\n",SEC_BACKUP_OAD_HEADER_FADDR);
000004  0289              LSLS     r1,r1,#10
000006  a006              ADR      r0,|L5.32|
000008  f7fffffe          BL       bim_uart_printf_null
;;;51         bim_flash_read(FLASH_SPACE_TYPE_MAIN, SEC_BACKUP_OAD_HEADER_FADDR/4, sizeof(img_hdr_t), (uint8_t *)&hdr_back);
00000c  2173              MOVS     r1,#0x73
00000e  4b0f              LDR      r3,|L5.76|
000010  2210              MOVS     r2,#0x10
000012  0209              LSLS     r1,r1,#8
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       bim_flash_read
;;;52     	
;;;53     	//bim_printf("hdr_back.crc = ",hdr_back.crc, 16);
;;;54     	//bim_uart_write("\r\n");
;;;55     /*	bim_printf("hdr_back.crc_status = ",hdr_back.crc_status, 16);
;;;56     	bim_uart_write("\r\n");
;;;57     	bim_printf("hdr_back.len = ",hdr_back.len, 16);
;;;58     	bim_uart_write("\r\n");
;;;59     	bim_printf("hdr_img.rom_ver = ",hdr_back.rom_ver, 16);
;;;60     	bim_uart_write("\r\n");
;;;61     	bim_printf("hdr_back.sec_status = ",hdr_back.sec_status, 16);
;;;62     	bim_uart_write("\r\n");
;;;63     	bim_printf("hdr_back.ver = ",hdr_back.ver, 16);
;;;64     	bim_uart_write("\r\n");
;;;65     	bim_printf("hdr_back.uid = ",hdr_back.uid, 16);
;;;66     	bim_uart_write("\r\n");
;;;67     	*/
;;;68     	return 0;
00001a  2000              MOVS     r0,#0
;;;69     }
00001c  bd10              POP      {r4,pc}
;;;70     
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
000020  7564695f          DCB      "udi_get_psec_backup_header addr = 0x%x\r\n",0
000024  6765745f
000028  70736563
00002c  5f626163
000030  6b75705f
000034  68656164
000038  65722061
00003c  64647220
000040  3d203078
000044  25780d0a
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L5.76|
                          DCD      ||.bss||+0x10

                          AREA ||i.bim_get_psec_image_header||, CODE, READONLY, ALIGN=2

                  bim_get_psec_image_header PROC
;;;13     
;;;14     uint32_t bim_get_psec_image_header(void)
000000  480e              LDR      r0,|L6.60|
;;;15     {
000002  b510              PUSH     {r4,lr}
;;;16     	uint32_t sec_image_oad_header_fddr;
;;;17     	
;;;18     	if(hdr_back.uid == OAD_APP_PART_UID)
000004  6880              LDR      r0,[r0,#8]  ; hdr_back
000006  490e              LDR      r1,|L6.64|
000008  4288              CMP      r0,r1
00000a  d101              BNE      |L6.16|
;;;19     	{
;;;20     		sec_image_oad_header_fddr = SEC_IMAGE_OAD_HEADER_APP_FADDR;
00000c  4c0d              LDR      r4,|L6.68|
00000e  e003              B        |L6.24|
                  |L6.16|
;;;21     	}
;;;22     	else if(hdr_back.uid == OAD_APP_STACK_UID)
000010  490d              LDR      r1,|L6.72|
000012  4288              CMP      r0,r1
000014  d100              BNE      |L6.24|
;;;23     	{
;;;24     		sec_image_oad_header_fddr = SEC_IMAGE_OAD_HEADER_STACK_FADDR;
000016  4c0d              LDR      r4,|L6.76|
                  |L6.24|
;;;25     	}
;;;26         bim_printf("sec_image_oad_header_fddr = ", sec_image_oad_header_fddr,16 );
000018  2210              MOVS     r2,#0x10
00001a  0021              MOVS     r1,r4
00001c  a00c              ADR      r0,|L6.80|
00001e  f7fffffe          BL       bim_printf
;;;27         bim_uart_write("\r\n");
000022  a013              ADR      r0,|L6.112|
000024  f7fffffe          BL       bim_uart_write
;;;28         bim_flash_read(FLASH_SPACE_TYPE_MAIN, sec_image_oad_header_fddr/4, sizeof(img_hdr_t), (uint8_t *)&hdr_img);
000028  4b04              LDR      r3,|L6.60|
00002a  08a1              LSRS     r1,r4,#2
00002c  3b10              SUBS     r3,r3,#0x10
00002e  2210              MOVS     r2,#0x10
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       bim_flash_read
;;;29     
;;;30     	//bim_printf("hdr_img.crc = ",hdr_img.crc,16);
;;;31         //bim_uart_write("\r\n");
;;;32     /*	bim_printf("hdr_img.crc_status = ",hdr_img.crc_status,16);
;;;33         bim_uart_write("\r\n");
;;;34     	bim_printf("hdr_img.len = ",hdr_img.len,16);
;;;35         bim_uart_write("\r\n");
;;;36     	bim_printf("hdr_img.rom_ver = ",hdr_img.rom_ver,16);
;;;37         bim_uart_write("\r\n");
;;;38     	bim_printf("hdr_img.sec_status = ",hdr_img.sec_status,16);
;;;39         bim_uart_write("\r\n");
;;;40     	bim_printf("hdr_img.ver = ",hdr_img.ver,16);
;;;41         bim_uart_write("\r\n");
;;;42     	bim_printf("hdr_img.uid = ",hdr_img.uid,16);
;;;43         bim_uart_write("\r\n");
;;;44     	*/
;;;45        	return 0;
000036  2000              MOVS     r0,#0
;;;46     }
000038  bd10              POP      {r4,pc}
;;;47      
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      ||.bss||+0x10
                  |L6.64|
                          DCD      0x42424242
                  |L6.68|
                          DCD      0x00012810
                  |L6.72|
                          DCD      0x53535353
                  |L6.76|
                          DCD      0x00001010
                  |L6.80|
000050  7365635f          DCB      "sec_image_oad_header_fddr = ",0
000054  696d6167
000058  655f6f61
00005c  645f6865
000060  61646572
000064  5f666464
000068  72203d20
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L6.112|
000070  0d0a00            DCB      "\r\n",0
000073  00                DCB      0

                          AREA ||i.bim_select_sec||, CODE, READONLY, ALIGN=2

                  bim_select_sec PROC
;;;363    				
;;;364    uint8_t bim_select_sec(void)
000000  b510              PUSH     {r4,lr}
;;;365    {
;;;366    	uint8_t bsec_status;
;;;367    	uint8_t status = 0;
000002  2400              MOVS     r4,#0
;;;368    	bsec_status = bim_check_backup_sec_status();
000004  f7fffffe          BL       bim_check_backup_sec_status
;;;369    
;;;370    	switch(bsec_status)
000008  2800              CMP      r0,#0
00000a  d008              BEQ      |L7.30|
00000c  2801              CMP      r0,#1
00000e  d01f              BEQ      |L7.80|
000010  2802              CMP      r0,#2
000012  d018              BEQ      |L7.70|
000014  2804              CMP      r0,#4
000016  d01e              BEQ      |L7.86|
;;;371    	{
;;;372    		case SSTATUS_SECT_NORMAL: // 1:I NORMAL ,B NORMAL,updata B -> I,RUN I 
;;;373    		{
;;;374    			if(hdr_back.uid == OAD_APP_PART_UID)
;;;375    			{
;;;376    				//bim_fflash_wr_protect_128k();
;;;377    			}
;;;378                bim_erase_image_sec();
;;;379                bim_updata_backup_to_image_sec();
;;;380                if(SSTATUS_SECT_NORMAL == bim_check_image_sec_status())
;;;381                {
;;;382                    bim_erase_backup_sec();
;;;383                    status = 1;
;;;384                }
;;;385                else
;;;386                {
;;;387                    bim_wdt_enable(100);//reset
;;;388                } 
;;;389                bim_uart_write("TYPE = 1\r\n");
;;;390                //bim_fflash_wp_ALL();
;;;391    		}break;
;;;392    		
;;;393    		case SSTATUS_SECT_ABNORMAL://://2     :I NORMAL,B ABNORMAL ,ERASE B,RUN I
;;;394    		{
;;;395    			//bim_fflash_wr_protect_256k();
;;;396    			bim_erase_backup_sec();
;;;397    			status = 1;
;;;398    			bim_uart_write("TYPE = 2\r\n");
;;;399    			//bim_fflash_wp_ALL();
;;;400                
;;;401    		}break;
;;;402    		
;;;403    		case SSTATUS_SECT_ERASED://://3:I NORMAL,B ERASED,RUN I
;;;404    		{
;;;405    			status = 1;
;;;406    			bim_uart_write("TYPE = 3\r\n");
;;;407    		}break;
;;;408    		
;;;409    		case SSTATUS_SECT_DIFF_ROM_VER:////4:I DIFF_ROM,B ERASED,NOT HAPPEN
;;;410    		{
;;;411                //bim_fflash_wr_protect_256k();
;;;412    			status = 1;
;;;413    			bim_erase_backup_sec();
;;;414    			bim_uart_write("TYPE = 4 SSTATUS_SECT_DIFF_ROM_VER\r\n");
;;;415                //bim_fflash_wp_ALL();
;;;416    		}break;
;;;417    		
;;;418    		default:
;;;419            {
;;;420                //bim_fflash_wr_protect_256k();
;;;421    			status = 1;
000018  2401              MOVS     r4,#1
;;;422    			//bim_erase_backup_sec();
;;;423    			bim_uart_write(" SSTATUS_SECT_UNKOWN\r\n");
00001a  a011              ADR      r0,|L7.96|
;;;424                //bim_fflash_wp_ALL();
;;;425            }break;
00001c  e00b              B        |L7.54|
                  |L7.30|
00001e  f7fffffe          BL       bim_erase_image_sec
000022  f7fffffe          BL       bim_updata_backup_to_image_sec
000026  f7fffffe          BL       bim_check_image_sec_status
00002a  2800              CMP      r0,#0                 ;380
00002c  d007              BEQ      |L7.62|
00002e  2064              MOVS     r0,#0x64              ;387
000030  f7fffffe          BL       bim_wdt_enable
                  |L7.52|
000034  a010              ADR      r0,|L7.120|
                  |L7.54|
000036  f7fffffe          BL       bim_uart_write
;;;426    				
;;;427    	}
;;;428    
;;;429    
;;;430    	return status ;
00003a  0020              MOVS     r0,r4
;;;431    
;;;432    }
00003c  bd10              POP      {r4,pc}
                  |L7.62|
00003e  f7fffffe          BL       bim_erase_backup_sec
000042  2401              MOVS     r4,#1                 ;383
000044  e7f6              B        |L7.52|
                  |L7.70|
000046  f7fffffe          BL       bim_erase_backup_sec
00004a  2401              MOVS     r4,#1                 ;397
00004c  a00d              ADR      r0,|L7.132|
00004e  e7f2              B        |L7.54|
                  |L7.80|
000050  2401              MOVS     r4,#1                 ;405
000052  a00f              ADR      r0,|L7.144|
000054  e7ef              B        |L7.54|
                  |L7.86|
000056  2401              MOVS     r4,#1                 ;412
000058  f7fffffe          BL       bim_erase_backup_sec
00005c  a00f              ADR      r0,|L7.156|
00005e  e7ea              B        |L7.54|
;;;433    
                          ENDP

                  |L7.96|
000060  20535354          DCB      " SSTATUS_SECT_UNKOWN\r\n",0
000064  41545553
000068  5f534543
00006c  545f554e
000070  4b4f574e
000074  0d0a00  
000077  00                DCB      0
                  |L7.120|
000078  54595045          DCB      "TYPE = 1\r\n",0
00007c  203d2031
000080  0d0a00  
000083  00                DCB      0
                  |L7.132|
000084  54595045          DCB      "TYPE = 2\r\n",0
000088  203d2032
00008c  0d0a00  
00008f  00                DCB      0
                  |L7.144|
000090  54595045          DCB      "TYPE = 3\r\n",0
000094  203d2033
000098  0d0a00  
00009b  00                DCB      0
                  |L7.156|
00009c  54595045          DCB      "TYPE = 4 SSTATUS_SECT_DIFF_ROM_VER\r\n",0
0000a0  203d2034
0000a4  20535354
0000a8  41545553
0000ac  5f534543
0000b0  545f4449
0000b4  46465f52
0000b8  4f4d5f56
0000bc  45520d0a
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0

                          AREA ||i.bim_updata_backup_to_image_sec||, CODE, READONLY, ALIGN=2

                  bim_updata_backup_to_image_sec PROC
;;;332    
;;;333    void bim_updata_backup_to_image_sec(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;334    {
;;;335    	bim_uart_write("udi_updata_backup_to_image_sec\r\n");
000002  a018              ADR      r0,|L8.100|
000004  f7fffffe          BL       bim_uart_write
;;;336    	uint8_t data[BLOCK_SIZE];
;;;337    	uint32_t backup_size = hdr_back.len * 4;
000008  481f              LDR      r0,|L8.136|
;;;338    	uint32_t read_end_addr = SEC_BACKUP_OAD_HEADER_FADDR + backup_size;
00000a  2573              MOVS     r5,#0x73
00000c  88c1              LDRH     r1,[r0,#6]            ;337  ; hdr_back
00000e  02ad              LSLS     r5,r5,#10
;;;339    	uint32_t write_addr;
;;;340    
;;;341    	if(hdr_back.uid == OAD_APP_PART_UID) // only app part
000010  6880              LDR      r0,[r0,#8]  ; hdr_back
000012  0089              LSLS     r1,r1,#2              ;337
000014  194e              ADDS     r6,r1,r5              ;338
000016  491d              LDR      r1,|L8.140|
000018  4288              CMP      r0,r1
00001a  d101              BNE      |L8.32|
;;;342    	{
;;;343    		write_addr = SEC_IMAGE_OAD_HEADER_APP_FADDR;
00001c  4c1c              LDR      r4,|L8.144|
00001e  e003              B        |L8.40|
                  |L8.32|
;;;344    	}
;;;345    	else if(hdr_back.uid == OAD_APP_STACK_UID) //app and stack
000020  491c              LDR      r1,|L8.148|
000022  4288              CMP      r0,r1
000024  d100              BNE      |L8.40|
;;;346    	{
;;;347    		write_addr = SEC_IMAGE_OAD_HEADER_STACK_FADDR;
000026  4c1c              LDR      r4,|L8.152|
                  |L8.40|
;;;348    	}
;;;349    	bim_printf("write_addr = ",write_addr, 16);
000028  2210              MOVS     r2,#0x10
00002a  0021              MOVS     r1,r4
00002c  a01b              ADR      r0,|L8.156|
00002e  f7fffffe          BL       bim_printf
;;;350        bim_uart_write("\r\n");
000032  a01e              ADR      r0,|L8.172|
000034  f7fffffe          BL       bim_uart_write
;;;351    	
;;;352    	for(uint32_t read_addr = SEC_BACKUP_OAD_HEADER_FADDR;read_addr < read_end_addr;)
000038  e00d              B        |L8.86|
                  |L8.58|
;;;353    	{
;;;354            bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, data);
00003a  08a9              LSRS     r1,r5,#2
00003c  2210              MOVS     r2,#0x10
00003e  2000              MOVS     r0,#0
000040  466b              MOV      r3,sp
000042  f7fffffe          BL       bim_flash_read
;;;355            bim_flash_write(FLASH_SPACE_TYPE_MAIN, write_addr/4, BLOCK_SIZE, data);
000046  08a1              LSRS     r1,r4,#2
000048  2210              MOVS     r2,#0x10
00004a  2000              MOVS     r0,#0
00004c  466b              MOV      r3,sp
00004e  f7fffffe          BL       bim_flash_write
000052  3410              ADDS     r4,r4,#0x10
000054  3510              ADDS     r5,r5,#0x10
                  |L8.86|
000056  42b5              CMP      r5,r6                 ;352
000058  d3ef              BCC      |L8.58|
;;;356    		write_addr += BLOCK_SIZE;
;;;357    		read_addr += BLOCK_SIZE;
;;;358    	
;;;359    	}
;;;360    	bim_uart_write("udi_updata_backup_to_image_sec end\r\n");
00005a  a015              ADR      r0,|L8.176|
00005c  f7fffffe          BL       bim_uart_write
;;;361    }	
000060  bd7f              POP      {r0-r6,pc}
;;;362    
                          ENDP

000062  0000              DCW      0x0000
                  |L8.100|
000064  7564695f          DCB      "udi_updata_backup_to_image_sec\r\n",0
000068  75706461
00006c  74615f62
000070  61636b75
000074  705f746f
000078  5f696d61
00007c  67655f73
000080  65630d0a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L8.136|
                          DCD      ||.bss||+0x10
                  |L8.140|
                          DCD      0x42424242
                  |L8.144|
                          DCD      0x00012810
                  |L8.148|
                          DCD      0x53535353
                  |L8.152|
                          DCD      0x00001010
                  |L8.156|
00009c  77726974          DCB      "write_addr = ",0
0000a0  655f6164
0000a4  6472203d
0000a8  2000    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L8.172|
0000ac  0d0a00            DCB      "\r\n",0
0000af  00                DCB      0
                  |L8.176|
0000b0  7564695f          DCB      "udi_updata_backup_to_image_sec end\r\n",0
0000b4  75706461
0000b8  74615f62
0000bc  61636b75
0000c0  705f746f
0000c4  5f696d61
0000c8  67655f73
0000cc  65632065
0000d0  6e640d0a
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0

                          AREA ||i.calc_backup_sec_crc||, CODE, READONLY, ALIGN=2

                  calc_backup_sec_crc PROC
;;;114    
;;;115    uint32_t calc_backup_sec_crc(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;116    {
;;;117    	UART_PRINTF("%s\r\n",__func__);
000002  492e              LDR      r1,|L9.188|
000004  b08f              SUB      sp,sp,#0x3c           ;116
000006  a02e              ADR      r0,|L9.192|
000008  f7fffffe          BL       bim_uart_printf_null
;;;118    	uint8_t data[BLOCK_SIZE];
;;;119    	uint8_t tmp_data[BLOCK_SIZE];
;;;120    	uint16_t block_total;
;;;121    	uint32_t read_addr;
;;;122    	uint32_t calcuCrc = 0xffffffff;
00000c  2000              MOVS     r0,#0
00000e  43c0              MVNS     r0,r0
;;;123    	make_crc32_table();
000010  9003              STR      r0,[sp,#0xc]
000012  f7fffffe          BL       make_crc32_table
;;;124    	block_total = hdr_back.len / 4 - 1;
000016  482c              LDR      r0,|L9.200|
;;;125    	read_addr = SEC_BACKUP_OAD_IMAGE_FADDR;
000018  492c              LDR      r1,|L9.204|
00001a  88c0              LDRH     r0,[r0,#6]            ;124  ; hdr_back
00001c  000d              MOVS     r5,r1
00001e  0880              LSRS     r0,r0,#2              ;124
000020  1e40              SUBS     r0,r0,#1              ;124
000022  0407              LSLS     r7,r0,#16             ;124
000024  0c3f              LSRS     r7,r7,#16             ;124
;;;126    	UART_PRINTF("read start addr = 0x%x\r\n",read_addr);
000026  a02a              ADR      r0,|L9.208|
000028  f7fffffe          BL       bim_uart_printf_null
;;;127    	bim_printf("block_total=", block_total, 10);
00002c  220a              MOVS     r2,#0xa
00002e  0039              MOVS     r1,r7
000030  a02e              ADR      r0,|L9.236|
000032  f7fffffe          BL       bim_printf
;;;128    	bim_uart_write("\r\n");
000036  a031              ADR      r0,|L9.252|
000038  f7fffffe          BL       bim_uart_write
;;;129    	for(uint32_t i = 0;i < block_total; i++)
00003c  2600              MOVS     r6,#0
00003e  e02a              B        |L9.150|
                  |L9.64|
;;;130    	{
;;;131            bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, data);
000040  08ac              LSRS     r4,r5,#2
000042  2210              MOVS     r2,#0x10
000044  0021              MOVS     r1,r4
000046  2000              MOVS     r0,#0
000048  ab06              ADD      r3,sp,#0x18
00004a  f7fffffe          BL       bim_flash_read
;;;132            bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, tmp_data);
00004e  2210              MOVS     r2,#0x10
000050  0021              MOVS     r1,r4
000052  2000              MOVS     r0,#0
000054  ab0a              ADD      r3,sp,#0x28
000056  f7fffffe          BL       bim_flash_read
;;;133    		calcuCrc = make_crc32(calcuCrc,data,BLOCK_SIZE);
00005a  9803              LDR      r0,[sp,#0xc]
00005c  2210              MOVS     r2,#0x10
00005e  a906              ADD      r1,sp,#0x18
000060  f7fffffe          BL       make_crc32
;;;134    		read_addr+= BLOCK_SIZE;
;;;135    		
;;;136    		if(memcmp(data,tmp_data,BLOCK_SIZE) != 0)
000064  9003              STR      r0,[sp,#0xc]
000066  2210              MOVS     r2,#0x10
000068  3510              ADDS     r5,r5,#0x10
00006a  a90a              ADD      r1,sp,#0x28
00006c  a806              ADD      r0,sp,#0x18
00006e  f7fffffe          BL       memcmp
000072  2800              CMP      r0,#0
000074  d00e              BEQ      |L9.148|
;;;137    		{
;;;138    			UART_PRINTF("read_addr error = 0x08%x\r\n",read_addr);
000076  0029              MOVS     r1,r5
000078  a021              ADR      r0,|L9.256|
00007a  f7fffffe          BL       bim_uart_printf_null
;;;139    			for(int a=0;a<BLOCK_SIZE;a++)
00007e  2400              MOVS     r4,#0
                  |L9.128|
;;;140    			{
;;;141    				UART_PRINTF("tmp_data = %02x,data = %02x \r\n",tmp_data[a],data[a]);
000080  a806              ADD      r0,sp,#0x18
000082  5d02              LDRB     r2,[r0,r4]
000084  a80a              ADD      r0,sp,#0x28
000086  5d01              LDRB     r1,[r0,r4]
000088  a024              ADR      r0,|L9.284|
00008a  f7fffffe          BL       bim_uart_printf_null
00008e  1c64              ADDS     r4,r4,#1
000090  2c10              CMP      r4,#0x10              ;139
000092  dbf5              BLT      |L9.128|
                  |L9.148|
000094  1c76              ADDS     r6,r6,#1              ;139
                  |L9.150|
000096  42be              CMP      r6,r7                 ;129
000098  d3d2              BCC      |L9.64|
;;;142    			}
;;;143    		}
;;;144    	}
;;;145    	UART_PRINTF("read end addr = 0x%x,calcuCrc = 0x%08x\r\n",read_addr,calcuCrc);
00009a  9a03              LDR      r2,[sp,#0xc]
00009c  0029              MOVS     r1,r5
00009e  a027              ADR      r0,|L9.316|
0000a0  f7fffffe          BL       bim_uart_printf_null
;;;146    
;;;147    	bim_printf("crc=", calcuCrc, 16);
0000a4  9903              LDR      r1,[sp,#0xc]
0000a6  2210              MOVS     r2,#0x10
0000a8  a02f              ADR      r0,|L9.360|
0000aa  f7fffffe          BL       bim_printf
;;;148    	bim_uart_write("\r\n");
0000ae  a013              ADR      r0,|L9.252|
0000b0  f7fffffe          BL       bim_uart_write
;;;149    	
;;;150    	return calcuCrc;
0000b4  9803              LDR      r0,[sp,#0xc]
;;;151    }
0000b6  b00f              ADD      sp,sp,#0x3c
0000b8  bdf0              POP      {r4-r7,pc}
;;;152    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L9.188|
                          DCD      ||.constdata||+0x13
                  |L9.192|
0000c0  25730d0a          DCB      "%s\r\n",0
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L9.200|
                          DCD      ||.bss||+0x10
                  |L9.204|
                          DCD      0x0001cc10
                  |L9.208|
0000d0  72656164          DCB      "read start addr = 0x%x\r\n",0
0000d4  20737461
0000d8  72742061
0000dc  64647220
0000e0  3d203078
0000e4  25780d0a
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L9.236|
0000ec  626c6f63          DCB      "block_total=",0
0000f0  6b5f746f
0000f4  74616c3d
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L9.252|
0000fc  0d0a00            DCB      "\r\n",0
0000ff  00                DCB      0
                  |L9.256|
000100  72656164          DCB      "read_addr error = 0x08%x\r\n",0
000104  5f616464
000108  72206572
00010c  726f7220
000110  3d203078
000114  30382578
000118  0d0a00  
00011b  00                DCB      0
                  |L9.284|
00011c  746d705f          DCB      "tmp_data = %02x,data = %02x \r\n",0
000120  64617461
000124  203d2025
000128  3032782c
00012c  64617461
000130  203d2025
000134  30327820
000138  0d0a00  
00013b  00                DCB      0
                  |L9.316|
00013c  72656164          DCB      "read end addr = 0x%x,calcuCrc = 0x%08x\r\n",0
000140  20656e64
000144  20616464
000148  72203d20
00014c  30782578
000150  2c63616c
000154  63754372
000158  63203d20
00015c  30782530
000160  38780d0a
000164  00      
000165  00                DCB      0
000166  00                DCB      0
000167  00                DCB      0
                  |L9.360|
000168  6372633d          DCB      "crc=",0
00016c  00      
00016d  00                DCB      0
00016e  00                DCB      0
00016f  00                DCB      0

                          AREA ||i.calc_image_sec_crc||, CODE, READONLY, ALIGN=2

                  calc_image_sec_crc PROC
;;;72     uint32_t make_crc32(uint32_t crc,unsigned char *string,uint32_t size);
;;;73     uint32_t calc_image_sec_crc(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;74     {
;;;75     	
;;;76     	UART_PRINTF("%s\r\n",__func__);
000002  492a              LDR      r1,|L10.172|
000004  b08f              SUB      sp,sp,#0x3c           ;74
000006  a02a              ADR      r0,|L10.176|
000008  f7fffffe          BL       bim_uart_printf_null
;;;77     	uint8_t data[BLOCK_SIZE];
;;;78     	uint8_t tmp_data[BLOCK_SIZE];
;;;79     	uint32_t block_total;
;;;80     	uint32_t read_addr;
;;;81     	uint32_t calcuCrc = 0xffffffff;
00000c  2000              MOVS     r0,#0
00000e  43c0              MVNS     r0,r0
;;;82     	make_crc32_table();
000010  9003              STR      r0,[sp,#0xc]
000012  f7fffffe          BL       make_crc32_table
;;;83     	block_total =  hdr_img.len / 4 - 1;// not clac HDR
000016  4828              LDR      r0,|L10.184|
000018  88c1              LDRH     r1,[r0,#6]  ; hdr_img
;;;84     
;;;85     	if(hdr_img.uid == OAD_APP_PART_UID)
00001a  6880              LDR      r0,[r0,#8]  ; hdr_img
00001c  088f              LSRS     r7,r1,#2              ;83
00001e  4927              LDR      r1,|L10.188|
000020  1e7f              SUBS     r7,r7,#1
000022  4288              CMP      r0,r1
000024  d101              BNE      |L10.42|
;;;86     	{
;;;87     		read_addr = SEC_IMAGE_RUN_APP_FADDR;   // 108k
000026  4d26              LDR      r5,|L10.192|
000028  e004              B        |L10.52|
                  |L10.42|
;;;88     	}
;;;89     	else if(hdr_img.uid == OAD_APP_STACK_UID)  //8k
00002a  4926              LDR      r1,|L10.196|
00002c  4288              CMP      r0,r1
00002e  d101              BNE      |L10.52|
;;;90     	{
;;;91     		read_addr = SEC_IMAGE_RUN_STACK_FADDR;
000030  2581              MOVS     r5,#0x81
000032  016d              LSLS     r5,r5,#5
                  |L10.52|
;;;92     	}
;;;93     	UART_PRINTF("read start addr = 0x%x\r\n",read_addr);
000034  0029              MOVS     r1,r5
000036  a024              ADR      r0,|L10.200|
000038  f7fffffe          BL       bim_uart_printf_null
;;;94     	for(uint32_t i = 0;i < block_total; i++)
00003c  2600              MOVS     r6,#0
00003e  e02a              B        |L10.150|
                  |L10.64|
;;;95     	{
;;;96             bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, data);
000040  08ac              LSRS     r4,r5,#2
000042  2210              MOVS     r2,#0x10
000044  0021              MOVS     r1,r4
000046  2000              MOVS     r0,#0
000048  ab05              ADD      r3,sp,#0x14
00004a  f7fffffe          BL       bim_flash_read
;;;97             bim_flash_read(FLASH_SPACE_TYPE_MAIN, read_addr/4,BLOCK_SIZE, tmp_data);
00004e  2210              MOVS     r2,#0x10
000050  0021              MOVS     r1,r4
000052  2000              MOVS     r0,#0
000054  ab09              ADD      r3,sp,#0x24
000056  f7fffffe          BL       bim_flash_read
;;;98     		calcuCrc = make_crc32(calcuCrc,data,BLOCK_SIZE);
00005a  9803              LDR      r0,[sp,#0xc]
00005c  2210              MOVS     r2,#0x10
00005e  a905              ADD      r1,sp,#0x14
000060  f7fffffe          BL       make_crc32
;;;99     		
;;;100    		if(memcmp(data,tmp_data,BLOCK_SIZE) != 0)
000064  9003              STR      r0,[sp,#0xc]
000066  2210              MOVS     r2,#0x10
000068  a909              ADD      r1,sp,#0x24
00006a  a805              ADD      r0,sp,#0x14
00006c  f7fffffe          BL       memcmp
000070  2800              CMP      r0,#0
000072  d00e              BEQ      |L10.146|
;;;101    		{
;;;102    			UART_PRINTF("read_addr error = 0x08%x\r\n",read_addr);
000074  0029              MOVS     r1,r5
000076  a01b              ADR      r0,|L10.228|
000078  f7fffffe          BL       bim_uart_printf_null
;;;103    			for(int a=0;a<BLOCK_SIZE;a++)
00007c  2400              MOVS     r4,#0
                  |L10.126|
;;;104    			{
;;;105    				UART_PRINTF("tmp_data = %02x,data = %02x \r\n",tmp_data[a],data[a]);
00007e  a805              ADD      r0,sp,#0x14
000080  5d02              LDRB     r2,[r0,r4]
000082  a809              ADD      r0,sp,#0x24
000084  5d01              LDRB     r1,[r0,r4]
000086  a01e              ADR      r0,|L10.256|
000088  f7fffffe          BL       bim_uart_printf_null
00008c  1c64              ADDS     r4,r4,#1
00008e  2c10              CMP      r4,#0x10              ;103
000090  dbf5              BLT      |L10.126|
                  |L10.146|
000092  3510              ADDS     r5,r5,#0x10           ;103
000094  1c76              ADDS     r6,r6,#1              ;103
                  |L10.150|
000096  42be              CMP      r6,r7                 ;94
000098  d3d2              BCC      |L10.64|
;;;106    			}
;;;107    		}
;;;108    		read_addr+= BLOCK_SIZE;
;;;109    	}
;;;110    	UART_PRINTF("read end addr = 0x%x,calcuCrc = 0x%08x\r\n",read_addr,calcuCrc);
00009a  9a03              LDR      r2,[sp,#0xc]
00009c  0029              MOVS     r1,r5
00009e  a020              ADR      r0,|L10.288|
0000a0  f7fffffe          BL       bim_uart_printf_null
;;;111    	
;;;112    	return calcuCrc;
0000a4  9803              LDR      r0,[sp,#0xc]
;;;113    }
0000a6  b00f              ADD      sp,sp,#0x3c
0000a8  bdf0              POP      {r4-r7,pc}
;;;114    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L10.172|
                          DCD      ||.constdata||
                  |L10.176|
0000b0  25730d0a          DCB      "%s\r\n",0
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L10.184|
                          DCD      ||.bss||
                  |L10.188|
                          DCD      0x42424242
                  |L10.192|
                          DCD      0x00012820
                  |L10.196|
                          DCD      0x53535353
                  |L10.200|
0000c8  72656164          DCB      "read start addr = 0x%x\r\n",0
0000cc  20737461
0000d0  72742061
0000d4  64647220
0000d8  3d203078
0000dc  25780d0a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L10.228|
0000e4  72656164          DCB      "read_addr error = 0x08%x\r\n",0
0000e8  5f616464
0000ec  72206572
0000f0  726f7220
0000f4  3d203078
0000f8  30382578
0000fc  0d0a00  
0000ff  00                DCB      0
                  |L10.256|
000100  746d705f          DCB      "tmp_data = %02x,data = %02x \r\n",0
000104  64617461
000108  203d2025
00010c  3032782c
000110  64617461
000114  203d2025
000118  30327820
00011c  0d0a00  
00011f  00                DCB      0
                  |L10.288|
000120  72656164          DCB      "read end addr = 0x%x,calcuCrc = 0x%08x\r\n",0
000124  20656e64
000128  20616464
00012c  72203d20
000130  30782578
000134  2c63616c
000138  63754372
00013c  63203d20
000140  30782530
000144  38780d0a
000148  00      
000149  00                DCB      0
00014a  00                DCB      0
00014b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  hdr_img
                          %        16
                  hdr_back
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  63616c63          DCB      0x63,0x61,0x6c,0x63
000004  5f696d61          DCB      0x5f,0x69,0x6d,0x61
000008  67655f73          DCB      0x67,0x65,0x5f,0x73
00000c  65635f63          DCB      0x65,0x63,0x5f,0x63
000010  726300            DCB      0x72,0x63,0x00
                  |symbol_number.36|
000013  63                DCB      0x63
000014  616c635f          DCB      0x61,0x6c,0x63,0x5f
000018  6261636b          DCB      0x62,0x61,0x63,0x6b
00001c  75705f73          DCB      0x75,0x70,0x5f,0x73
000020  65635f63          DCB      0x65,0x63,0x5f,0x63
000024  726300            DCB      0x72,0x63,0x00
